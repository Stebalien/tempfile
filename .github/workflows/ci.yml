on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CARGO_TARGET_WASM32_WASIP1_RUNNER: "/home/runner/.wasmtime/bin/wasmtime --dir /tmp/"
  CARGO_TARGET_WASM32_WASIP2_RUNNER: "/home/runner/.wasmtime/bin/wasmtime --dir /tmp/"
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: "-D warnings"
  NDK_VERSION: "r27d"

name: CI
jobs:
  deny:
    name: Cargo deny
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2
    timeout-minutes: 10

  build_and_test:
    strategy:
      fail-fast: false
      matrix:
        rust-version:
          - nightly
          - stable
          - "1.63"
        platform:
          - name: "Linux"
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: "Windows"
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: "MacOS"
            os: macos-latest
            target: aarch64-apple-darwin
          - name: "Android (aarch64)"
            os: ubuntu-latest
            target: aarch64-linux-android
        exclude:
          - rust-version: "1.63"
            platform:
              name: "Android (aarch64)"
              os: ubuntu-latest
              target: aarch64-linux-android
        include:
          - rust-version: "nightly"
            test-flags: --tests
            platform:
              name: "WASI P1"
              os: ubuntu-latest
              target: wasm32-wasip1
          - rust-version: "nightly"
            test-flags: --tests
            platform:
              name: "WASI P2"
              os: ubuntu-latest
              target: wasm32-wasip2
    name: Platform Test (${{ matrix.platform.name }} / ${{ matrix.rust-version }})
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
          targets: ${{ matrix.platform.target }}
      - name: Generating the Cargo.lock
        run: cargo generate-lockfile
      - name: Downgrading once_cell
        if: matrix.rust-version == 1.63
        run: cargo update -p once_cell --precise 1.20.3
      - name: Install Wasmtime
        if: ${{ startsWith(matrix.platform.target, 'wasm32-wasi') }}
        run: curl https://wasmtime.dev/install.sh -sSf | bash
      - name: Setup Android NDK and environment
        if: ${{ contains(matrix.platform.target, 'android') }}
        run: |
          NDK_URL="https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip"
          NDK_DIR="${HOME}/android-ndk-${NDK_VERSION}"

          # Download and extract NDK
          echo "Downloading NDK from $NDK_URL"
          wget -q "$NDK_URL" -O android-ndk.zip
          unzip -q android-ndk.zip -d "$HOME"

          # Set ANDROID_NDK_ROOT environment variable
          echo "ANDROID_NDK_ROOT=$NDK_DIR" >> $GITHUB_ENV

          # Configure Android environment
          echo "CC_aarch64_linux_android=$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android34-clang" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android34-clang" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_RUSTFLAGS=-C link-arg=-Wl,--as-needed" >> $GITHUB_ENV
      - name: Build
        run: cargo build --target ${{ matrix.platform.target }} ${{ matrix.rust-version == 'nightly' && '--features nightly' || '' }}
      - name: Test
        if: ${{ !contains(matrix.platform.target, 'android') }}
        run: cargo test --target ${{ matrix.platform.target }} ${{ matrix.rust-version == 'nightly' && '--features nightly' || '' }} ${{ matrix.test-flags || matrix.platform.test-flags }}
      - name: Setup required kernel modules for redroid
        if: ${{ contains(matrix.platform.target, 'android') }}
        run: |
          sudo apt install -y linux-modules-extra-$(uname -r) || true
          sudo modprobe binder_linux devices="binder,hwbinder,vndbinder" || true
          sudo modprobe ashmem_linux || true
      - name: Install ADB
        if: ${{ contains(matrix.platform.target, 'android') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y android-tools-adb
      - name: Test on Android (redroid container)
        if: ${{ contains(matrix.platform.target, 'android') }}
        run: |
          # Start redroid container with ARM64 support
          docker run -itd --rm --privileged \
            --name redroid-test \
            -p 5555:5555 \
            redroid/redroid:16.0.0_64only-latest

          # Start ADB server and connect to our redroid container
          adb start-server
          timeout 60 bash -c 'until adb connect localhost:5555; do sleep 2; done'

          # Build all test binaries
          cargo test --target ${{ matrix.platform.target }} ${{ matrix.rust-version == 'nightly' && '--features nightly' || '' }} --no-run

          ls "target/aarch64-linux-android/debug/deps/"

          # Push and run each test executable
          while IFS= read -r -d '' TEST_BINARY; do
            BINARY_NAME="$(basename "$TEST_BINARY")"
            echo "Running test binary: $BINARY_NAME"

            # Push the test binary to the Android container
            adb -s localhost:5555 push "$TEST_BINARY" "/data/local/tmp/$BINARY_NAME"
            adb -s localhost:5555 shell chmod 755 "/data/local/tmp/$BINARY_NAME"

            # Run the test - exit on failure
            adb -s localhost:5555 shell "/data/local/tmp/$BINARY_NAME"
          done < <(find target/aarch64-linux-android/debug/deps/ -type f -executable -print0)

          # Cleanup
          docker stop redroid-test || true
  wasm:
    name: WASM Test Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: Build
        run: cargo build --target wasm32-unknown-unknown
  lint:
    name: Clippy, fmt, and docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Check formatting
        run: cargo fmt --check
      - name: Check documentation
        run: cargo doc --all --no-deps
      - name: Check for clippy lints
        run: cargo clippy
