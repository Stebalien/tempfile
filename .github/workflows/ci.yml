on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CARGO_TARGET_WASM32_WASIP1_RUNNER: "/home/runner/.wasmtime/bin/wasmtime --dir /tmp/"
  CARGO_TARGET_WASM32_WASIP2_RUNNER: "/home/runner/.wasmtime/bin/wasmtime --dir /tmp/"
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: "-D warnings"

name: CI
jobs:
  deny:
    name: Cargo deny
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2
    timeout-minutes: 10

  build_and_test:
    strategy:
      fail-fast: false
      matrix:
        rust-version:
          - nightly
          - stable
          - "1.63"
        platform:
          - name: "Linux"
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: "Windows"
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: "MacOS"
            os: macos-latest
            target: aarch64-apple-darwin
          - name: "Android (aarch64)"
            os: ubuntu-latest
            target: aarch64-linux-android
        exclude:
          - rust-version: "1.63"
            platform:
              name: "Android (aarch64)"
              os: ubuntu-latest
              target: aarch64-linux-android
              test-flags: --no-run
        include:
          - rust-version: "nightly"
            test-flags: --tests
            platform:
              name: "WASI P1"
              os: ubuntu-latest
              target: wasm32-wasip1
          - rust-version: "nightly"
            test-flags: --tests
            platform:
              name: "WASI P2"
              os: ubuntu-latest
              target: wasm32-wasip2
    name: Platform Test (${{ matrix.platform.name }} / ${{ matrix.rust-version }})
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
          targets: ${{ matrix.platform.target }}
      - name: Generating the Cargo.lock
        run: cargo generate-lockfile
      - name: Downgrading once_cell
        if: matrix.rust-version == 1.63
        run: cargo update -p once_cell --precise 1.20.3
      - name: Install Wasmtime
        if: ${{ startsWith(matrix.platform.target, 'wasm32-wasi') }}
        run: curl https://wasmtime.dev/install.sh -sSf | bash
      - name: Setup Android NDK
        if: ${{ contains(matrix.platform.target, 'android') }}
        run: |
          NDK_VERSION="r25c"
          NDK_URL="https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip"
          NDK_DIR="${HOME}/android-ndk-${NDK_VERSION}"
          
          # Download and extract NDK
          echo "Downloading NDK from $NDK_URL"
          wget -q "$NDK_URL" -O android-ndk.zip
          unzip -q android-ndk.zip -d "$HOME"
          
          # Set ANDROID_NDK_ROOT environment variable
          echo "ANDROID_NDK_ROOT=$NDK_DIR" >> $GITHUB_ENV
      - name: Configure Android environment
        if: ${{ contains(matrix.platform.target, 'android') }}
        run: |
          API_LEVEL="30"
          echo "CC_aarch64_linux_android=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API_LEVEL}-clang" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API_LEVEL}-clang" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_RUSTFLAGS=-C link-arg=-Wl,--as-needed" >> $GITHUB_ENV
      - name: Build
        run: cargo build --target ${{ matrix.platform.target }} ${{ matrix.rust-version == 'nightly' && '--features nightly' || '' }}
      - name: Test
        if: ${{ !contains(matrix.platform.target, 'android') }}
        run: cargo test --target ${{ matrix.platform.target }} ${{ matrix.rust-version == 'nightly' && '--features nightly' || '' }} ${{ matrix.test-flags || matrix.platform.test-flags }}
      - name: Enable KVM group perms
        if: ${{ contains(matrix.platform.target, 'android') }}
        run: |
            echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
            sudo udevadm control --reload-rules
            sudo udevadm trigger --name-match=kvm
      - name: AVD cache
        if: ${{ contains(matrix.platform.target, 'android') }}
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30
      - name: Create AVD and generate snapshot for caching
        if: ${{ contains(matrix.platform.target, 'android') && steps.avd-cache.outputs.cache-hit != 'true' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: arm64-v8a
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
      - name: Test on Android Emulator
        if: ${{ contains(matrix.platform.target, 'android') }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: arm64-v8a
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            # Build the test binary
            cargo test --target ${{ matrix.platform.target }} ${{ matrix.rust-version == 'nightly' && '--features nightly' || '' }} --no-run
            
            # Find the test binary
            TEST_BINARY=$(find target/aarch64-linux-android/debug/deps/ -name 'tempfile-*' -type f -executable | head -1)
            echo "Found test binary: $TEST_BINARY"
            
            # Push the test binary to the Android device
            adb push "$TEST_BINARY" /data/local/tmp/tempfile-test
            adb shell chmod 755 /data/local/tmp/tempfile-test
            
            # Create a temporary directory for tests
            adb shell mkdir -p /data/local/tmp/test_temp
            
            # Run the tests
            adb shell "cd /data/local/tmp/test_temp && /data/local/tmp/tempfile-test"
  wasm:
    name: WASM Test Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: Build
        run: cargo build --target wasm32-unknown-unknown
  lint:
    name: Clippy, fmt, and docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Check formatting
        run: cargo fmt --check
      - name: Check documentation
        run: cargo doc --all --no-deps
      - name: Check for clippy lints
        run: cargo clippy
